"""
Script de prueba para el pipeline completo de reconocimiento de placas
Testa la integraci√≥n de detecci√≥n + OCR
"""
import sys
from pathlib import Path
import time

sys.path.append(str(Path(__file__).parent.parent))

import settings
from services.extractPlatePipeline import PlateRecognitionPipeline, PipelineStatus

def print_separator(char="=", length=70):
    """Imprime una l√≠nea separadora"""
    print(char * length)

def print_result_detail(image_name: str, result, duration: float):
    """Imprime los detalles de un resultado"""
    print(f"\nüì∏ Imagen: {image_name}")
    print(f"‚è±Ô∏è  Tiempo: {duration:.2f}s")
    
    if result.is_success():
        print(f"‚úÖ Estado: {result.status.value.upper()}")
        print(f"üî¢ Placa: {result.plate_text}")
        print(f"üìä Confianza OCR: {result.confidence:.1%}")
        print(f"üìä Confianza Detecci√≥n: {result.detection_confidence:.1%}")
        print(f"üí¨ Mensaje: {result.message}")
    else:
        # Mostrar error con su categor√≠a
        status_emoji = {
            PipelineStatus.NO_PLATE_DETECTED: "üö´",
            PipelineStatus.MULTIPLE_PLATES_DETECTED: "‚ö†Ô∏è",
            PipelineStatus.NO_TEXT_DETECTED: "üìù",
            PipelineStatus.LOW_CONFIDENCE: "üìâ",
            PipelineStatus.INVALID_FORMAT: "‚ùå",
            PipelineStatus.ERROR: "üí•"
        }
        
        emoji = status_emoji.get(result.status, "‚ö†Ô∏è")
        print(f"{emoji} Estado: {result.status.value.upper()}")
        print(f"üí¨ Mensaje para usuario:")
        for line in result.message.split('\n'):
            if line.strip():
                print(f"   {line}")
        
        # Mostrar detalles adicionales si est√°n disponibles
        if result.plate_text:
            print(f"üîç Texto detectado (no validado): {result.plate_text}")
        if result.confidence:
            print(f"üìä Confianza: {result.confidence:.1%}")

def main():
    print_separator("=")
    print("PRUEBA DEL PIPELINE COMPLETO DE RECONOCIMIENTO DE PLACAS")
    print_separator("=")
    
    # Verificaciones iniciales
    if not settings.TEST_IMAGES_DIR.exists():
        print(f"\n‚ùå Error: No existe el directorio {settings.TEST_IMAGES_DIR}")
        print("\nCrea el directorio y coloca im√°genes de prueba:")
        print(f"   mkdir -p {settings.TEST_IMAGES_DIR}")
        return
    
    if not settings.PLATE_DETECTION_MODEL.exists():
        print(f"\n‚ùå Error: No se encuentra el modelo en {settings.PLATE_DETECTION_MODEL}")
        return
    
    # Obtener todas las im√°genes
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.jfif']
    all_images = []
    for ext in image_extensions:
        all_images.extend(settings.TEST_IMAGES_DIR.glob(ext))
    
    if not all_images:
        print(f"\n‚ùå No se encontraron im√°genes en {settings.TEST_IMAGES_DIR}")
        print("\nColoca im√°genes de prueba en ese directorio")
        return
    
    print(f"\nüìä Im√°genes encontradas: {len(all_images)}")
    print(f"üìÅ Directorio: {settings.TEST_IMAGES_DIR}")
    
    # Inicializar pipeline
    print("\n")
    print_separator("-")
    try:
        pipeline = PlateRecognitionPipeline()
    except Exception as e:
        print(f"\n‚ùå Error al inicializar el pipeline: {str(e)}")
        return
    
    # Procesar todas las im√°genes
    print_separator("=")
    print("PROCESANDO IM√ÅGENES")
    print_separator("=")
    
    results = {}
    total_time = 0
    
    for idx, image_path in enumerate(sorted(all_images), 1):
        print(f"\n[{idx}/{len(all_images)}] {'‚îÄ' * 60}")
        
        start_time = time.time()
        result = pipeline.process_image(str(image_path))
        duration = time.time() - start_time
        total_time += duration
        
        image_name = image_path.name
        results[image_name] = result
        
        print_result_detail(image_name, result, duration)
    
    # REPORTE FINAL
    print("\n")
    print_separator("=")
    print("üìä REPORTE FINAL DEL PIPELINE")
    print_separator("=")
    
    stats = pipeline.get_statistics(results)
    
    print(f"\nüéØ RESUMEN GENERAL:")
    print(f"   Total de im√°genes:        {stats['total']}")
    print(f"   Tiempo total:             {total_time:.2f}s")
    print(f"   Tiempo promedio:          {total_time/stats['total']:.2f}s por imagen")
    
    print(f"\n‚úÖ RESULTADOS POR ESTADO:")
    print(f"   √âxito:                    {stats['success']:2d} ({stats['success_rate']:.1f}%)")
    print(f"   Sin placa detectada:      {stats['no_plate_detected']:2d}")
    print(f"   M√∫ltiples placas:         {stats['multiple_plates_detected']:2d}")
    print(f"   Sin texto detectado:      {stats['no_text_detected']:2d}")
    print(f"   Baja confianza:           {stats['low_confidence']:2d}")
    print(f"   Formato inv√°lido:         {stats['invalid_format']:2d}")
    print(f"   Errores:                  {stats['errors']:2d}")
    
    if stats['success'] > 0:
        print(f"\nüìà M√âTRICAS DE √âXITO:")
        print(f"   Confianza promedio:       {stats['avg_confidence']:.1%}")
    
    # Listar placas exitosas
    successful = [(name, result) for name, result in results.items() 
                  if result.status == PipelineStatus.SUCCESS]
    
    if successful:
        print(f"\nüéâ PLACAS RECONOCIDAS EXITOSAMENTE ({len(successful)}):")
        print_separator("-")
        successful_sorted = sorted(successful, key=lambda x: x[1].confidence, reverse=True)
        
        for image_name, result in successful_sorted:
            print(f"   üìÑ {image_name:30s} ‚Üí {result.plate_text:12s} "
                  f"(OCR: {result.confidence:.1%}, Det: {result.detection_confidence:.1%})")
    
    # Listar problemas comunes
    print(f"\n")
    print_separator("-")
    print("‚ö†Ô∏è  AN√ÅLISIS DE PROBLEMAS COMUNES:")
    print_separator("-")
    
    problems = {
        PipelineStatus.NO_PLATE_DETECTED: [],
        PipelineStatus.MULTIPLE_PLATES_DETECTED: [],
        PipelineStatus.NO_TEXT_DETECTED: [],
        PipelineStatus.LOW_CONFIDENCE: [],
        PipelineStatus.INVALID_FORMAT: [],
        PipelineStatus.ERROR: []
    }
    
    for image_name, result in results.items():
        if result.status in problems:
            problems[result.status].append(image_name)
    
    if problems[PipelineStatus.NO_PLATE_DETECTED]:
        print(f"\nüö´ Sin placa detectada ({len(problems[PipelineStatus.NO_PLATE_DETECTED])} im√°genes):")
        print("   Causa: El detector no encontr√≥ ninguna placa en la imagen")
        print("   Soluci√≥n: Verificar que la imagen contenga una placa visible")
        for img in problems[PipelineStatus.NO_PLATE_DETECTED]:
            print(f"      ‚Ä¢ {img}")
    
    if problems[PipelineStatus.MULTIPLE_PLATES_DETECTED]:
        print(f"\n‚ö†Ô∏è  M√∫ltiples placas ({len(problems[PipelineStatus.MULTIPLE_PLATES_DETECTED])} im√°genes):")
        print("   Causa: Se detectaron varias placas en la misma imagen")
        print("   Soluci√≥n: El usuario debe tomar otra foto con solo una placa")
        for img in problems[PipelineStatus.MULTIPLE_PLATES_DETECTED]:
            print(f"      ‚Ä¢ {img}")
    
    if problems[PipelineStatus.NO_TEXT_DETECTED]:
        print(f"\nüìù Sin texto detectado ({len(problems[PipelineStatus.NO_TEXT_DETECTED])} im√°genes):")
        print("   Causa: El OCR no pudo extraer texto de la placa detectada")
        print("   Soluci√≥n: Mejorar calidad de imagen o iluminaci√≥n")
        for img in problems[PipelineStatus.NO_TEXT_DETECTED]:
            print(f"      ‚Ä¢ {img}")
    
    if problems[PipelineStatus.LOW_CONFIDENCE]:
        print(f"\nüìâ Baja confianza ({len(problems[PipelineStatus.LOW_CONFIDENCE])} im√°genes):")
        print("   Causa: El OCR detect√≥ texto pero con baja confianza")
        print("   Soluci√≥n: Verificar iluminaci√≥n y nitidez")
        for img in problems[PipelineStatus.LOW_CONFIDENCE]:
            result = results[img]
            conf_str = f"{result.confidence:.1%}" if result.confidence else "N/A"
            print(f"      ‚Ä¢ {img} (confianza: {conf_str})")
    
    if problems[PipelineStatus.INVALID_FORMAT]:
        print(f"\n‚ùå Formato inv√°lido ({len(problems[PipelineStatus.INVALID_FORMAT])} im√°genes):")
        print("   Causa: El texto detectado no parece ser una placa v√°lida")
        print("   Soluci√≥n: Verificar que solo la placa est√© en la imagen")
        for img in problems[PipelineStatus.INVALID_FORMAT]:
            result = results[img]
            text = result.plate_text if result.plate_text else "N/A"
            print(f"      ‚Ä¢ {img} (texto: '{text}')")
    
    if problems[PipelineStatus.ERROR]:
        print(f"\nüí• Errores ({len(problems[PipelineStatus.ERROR])} im√°genes):")
        print("   Causa: Error t√©cnico durante el procesamiento")
        for img in problems[PipelineStatus.ERROR]:
            print(f"      ‚Ä¢ {img}")
    
    # CONCLUSIONES
    print(f"\n")
    print_separator("=")
    print("‚úÖ CONCLUSIONES DEL PIPELINE")
    print_separator("=")
    
    print(f"\nüìä Tasa de √©xito total: {stats['success_rate']:.1f}%")
    print(f"   ‚Üí {stats['success']} de {stats['total']} im√°genes procesadas exitosamente")
    
    if stats['success_rate'] >= 80:
        print("\nüéâ Excelente! El pipeline est√° funcionando muy bien")
    elif stats['success_rate'] >= 60:
        print("\n‚úÖ Bien! El pipeline funciona correctamente")
        print("   Considera mejorar la calidad de las im√°genes de prueba")
    elif stats['success_rate'] >= 40:
        print("\n‚ö†Ô∏è  Moderado. El pipeline funciona pero hay margen de mejora")
        print("   Revisa las im√°genes con problemas")
    else:
        print("\n‚ùå Baja tasa de √©xito. Revisa:")
        print("   ‚Ä¢ Calidad de las im√°genes de prueba")
        print("   ‚Ä¢ Configuraci√≥n del modelo")
        print("   ‚Ä¢ Umbrales de confianza")
    
    # Integraci√≥n con backend
    print(f"\nüì± PARA INTEGRACI√ìN CON BACKEND:")
    print("   1. El pipeline devuelve un PipelineResult con:")
    print("      ‚Ä¢ status: Estado del procesamiento")
    print("      ‚Ä¢ plate_text: Texto de la placa (si exitoso)")
    print("      ‚Ä¢ message: Mensaje para mostrar al usuario")
    print("      ‚Ä¢ confidence: Nivel de confianza")
    
    print("\n   2. Uso recomendado:")
    print("      ```python")
    print("      pipeline = PlateRecognitionPipeline()")
    print("      result = pipeline.process_image(image_path)")
    print("      ")
    print("      if result.is_success():")
    print("          # Llamar a la API con result.plate_text")
    print("          vehicle_data = api.get_vehicle_info(result.plate_text)")
    print("      else:")
    print("          # Mostrar result.message al usuario")
    print("          return {'error': result.message}")
    print("      ```")
    
    print("\n   3. Estados a manejar en el frontend:")
    print("      ‚Ä¢ SUCCESS ‚Üí Continuar con consulta API")
    print("      ‚Ä¢ NO_PLATE_DETECTED ‚Üí Pedir nueva foto")
    print("      ‚Ä¢ MULTIPLE_PLATES_DETECTED ‚Üí Pedir foto m√°s centrada")
    print("      ‚Ä¢ NO_TEXT_DETECTED ‚Üí Mejorar iluminaci√≥n")
    print("      ‚Ä¢ LOW_CONFIDENCE ‚Üí Opci√≥n de reintento o confirmaci√≥n manual")
    print("      ‚Ä¢ INVALID_FORMAT ‚Üí Verificar que es una placa")
    print("      ‚Ä¢ ERROR ‚Üí Mensaje t√©cnico de error")
    
    print(f"\nüìÇ Archivos generados:")
    print(f"   ‚Ä¢ Placas detectadas en: {settings.OUTPUT_DIR}")
    
    print("\n" + "=" * 70)
    print("‚úÖ TEST COMPLETADO")
    print("=" * 70)

if __name__ == "__main__":
    main()